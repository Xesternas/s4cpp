#include <stdio.h>
#include "mpi.h"
#include <math.h>
#include <iostream>;
#include <fstream>;

using namespace std;
int main(int argc, char* argv[]) {
	int n, rank, num_process, k, ibeg, iend;
	bool sim;
	bool procsim = true;
	double startwtime = 0.0, endwtime;
	MPI_Status status;

	MPI_Init(&argc, &argv);
	MPI_Comm_size(MPI_COMM_WORLD, &num_process);
	MPI_Comm_rank(MPI_COMM_WORLD, &rank);
	double* a;
	a = new double[num_process];

	cout << "Process " << rank << " of " << num_process << " Started " << endl;
	if (rank == 0) {
		cout << "Input len massive: " << endl;
		cin >> n;
		if (num_process > n / 2)
			num_process = n / 2;
		a = new double[n];
		cout << "Input elements: " << endl;
		for (int i = 0; i < n; i++) {
			double x;
			cin >> x;
			a[i] = x;
		}
		startwtime = MPI_Wtime();
		for (int i = 1; i < num_process; i++) {
			MPI_Send(&n, 1, MPI_DOUBLE, i, 0, MPI_COMM_WORLD);
			MPI_Send(a, n, MPI_DOUBLE, i, 0, MPI_COMM_WORLD);
		}
	}
	else {
		MPI_Recv(&n, 1, MPI_DOUBLE, 0, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
		if (num_process > n / 2)
			num_process = n / 2;
		MPI_Recv(a, n, MPI_DOUBLE, 0, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
	}

	k = n / 2 / num_process;
	ibeg = k * rank;
	iend = k * (rank + 1);    //54345 9876543223456789 654456*/
	if (rank == num_process - 1)
		iend = n / 2;
	for (int i = ibeg; i < iend; i++) {
		if (a[i] != a[n - i - 1]) {
			procsim = false;
		}
	}

	if (rank == 0) {
		sim = procsim;
		for (int i = 1; i < num_process; i++) {
			cout << num_process << endl;
			MPI_Recv(&procsim, 1, MPI_C_BOOL, i, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
			cout << "Output process " << i << " : " << procsim << endl;
			sim *= procsim;
		}
		endwtime = MPI_Wtime();
		cout << "time is " << endwtime - startwtime << endl;
		cout << "Sim: " << sim << endl;


	}
	else
		MPI_Send(&procsim, 1, MPI_C_BOOL, 0, 0, MPI_COMM_WORLD);
	/*if (rank == 0) {
		printf("\nSim: bool", sim);
	}*/
	MPI_Finalize();

	return 0;
}